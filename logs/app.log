2025-03-22 19:33:53 - Starting RestServiceApplication using Java 23.0.2 with PID 14196 (E:\RestService\target\classes started by Penumbra in E:\RestService)
2025-03-22 19:33:53 - No active profile set, falling back to 1 default profile: "default"
2025-03-22 19:33:53 - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-03-22 19:33:53 - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-03-22 19:33:54 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-03-22 19:33:55 - Finished Spring Data repository scanning in 51 ms. Found 3 JPA repository interfaces.
2025-03-22 19:33:55 - Tomcat initialized with port 8080 (http)
2025-03-22 19:33:55 - Initializing ProtocolHandler ["http-nio-8080"]
2025-03-22 19:33:55 - Starting service [Tomcat]
2025-03-22 19:33:55 - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-03-22 19:33:55 - Initializing Spring embedded WebApplicationContext
2025-03-22 19:33:55 - Root WebApplicationContext: initialization completed in 1904 ms
2025-03-22 19:33:55 - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-03-22 19:33:56 - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-03-22 19:33:56 - HHH000026: Second-level cache disabled
2025-03-22 19:33:56 - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-03-22 19:33:56 - HikariPool-1 - Starting...
2025-03-22 19:33:56 - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@6f502169
2025-03-22 19:33:56 - HikariPool-1 - Start completed.
2025-03-22 19:33:56 - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-03-22 19:33:56 - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-03-22 19:33:57 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-03-22 19:33:57 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-03-22 19:33:58 - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-03-22 19:33:59 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-03-22 19:33:59 - Failed to set up a Bean Validation provider: jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.
2025-03-22 19:33:59 - LiveReload server is running on port 35729
2025-03-22 19:33:59 - Starting ProtocolHandler ["http-nio-8080"]
2025-03-22 19:33:59 - Tomcat started on port 8080 (http) with context path '/'
2025-03-22 19:33:59 - Started RestServiceApplication in 6.484 seconds (process running for 7.298)
2025-03-22 19:34:41 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-03-22 19:34:41 - Initializing Servlet 'dispatcherServlet'
2025-03-22 19:34:41 - Completed initialization in 2 ms
2025-03-22 19:34:41 - Вызов метода: UserController.getAllUsers() с аргументами: []
2025-03-22 19:34:41 - Вызов метода: UserService.getAllUsers() с аргументами: []
2025-03-22 19:34:41 - Вызов метода: ListCrudRepository.findAll() с аргументами: []
2025-03-22 19:34:41 - select u1_0.id,u1_0.username from users u1_0
2025-03-22 19:34:41 - Метод ListCrudRepository.findAll() успешно выполнен. Результат: [com.example.restservice.model.User@6b84cbb6, com.example.restservice.model.User@35de6261, com.example.restservice.model.User@5305bad, com.example.restservice.model.User@190732ce, com.example.restservice.model.User@7253a351, com.example.restservice.model.User@6924b4af]
2025-03-22 19:34:41 - Метод UserService.getAllUsers() успешно выполнен. Результат: [com.example.restservice.model.User@6b84cbb6, com.example.restservice.model.User@35de6261, com.example.restservice.model.User@5305bad, com.example.restservice.model.User@190732ce, com.example.restservice.model.User@7253a351, com.example.restservice.model.User@6924b4af]
2025-03-22 19:34:41 - Вызов метода: UserService.getAllUsers() с аргументами: []
2025-03-22 19:34:41 - Вызов метода: ListCrudRepository.findAll() с аргументами: []
2025-03-22 19:34:41 - select u1_0.id,u1_0.username from users u1_0
2025-03-22 19:34:41 - Метод ListCrudRepository.findAll() успешно выполнен. Результат: [com.example.restservice.model.User@6b84cbb6, com.example.restservice.model.User@35de6261, com.example.restservice.model.User@5305bad, com.example.restservice.model.User@190732ce, com.example.restservice.model.User@7253a351, com.example.restservice.model.User@6924b4af]
2025-03-22 19:34:41 - Метод UserService.getAllUsers() успешно выполнен. Результат: [com.example.restservice.model.User@6b84cbb6, com.example.restservice.model.User@35de6261, com.example.restservice.model.User@5305bad, com.example.restservice.model.User@190732ce, com.example.restservice.model.User@7253a351, com.example.restservice.model.User@6924b4af]
2025-03-22 19:34:41 - Метод UserController.getAllUsers() успешно выполнен. Результат: [com.example.restservice.model.User@6b84cbb6, com.example.restservice.model.User@35de6261, com.example.restservice.model.User@5305bad, com.example.restservice.model.User@190732ce, com.example.restservice.model.User@7253a351, com.example.restservice.model.User@6924b4af]
2025-03-22 19:34:41 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:34:41 - select s1_0.playlist_id,s1_1.id,s1_1.artist,s1_1.title from playlist_songs s1_0 join songs s1_1 on s1_1.id=s1_0.song_id where s1_0.playlist_id=?
2025-03-22 19:34:41 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:34:41 - select s1_0.playlist_id,s1_1.id,s1_1.artist,s1_1.title from playlist_songs s1_0 join songs s1_1 on s1_1.id=s1_0.song_id where s1_0.playlist_id=?
2025-03-22 19:34:41 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:34:41 - select s1_0.playlist_id,s1_1.id,s1_1.artist,s1_1.title from playlist_songs s1_0 join songs s1_1 on s1_1.id=s1_0.song_id where s1_0.playlist_id=?
2025-03-22 19:34:41 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:34:41 - select s1_0.playlist_id,s1_1.id,s1_1.artist,s1_1.title from playlist_songs s1_0 join songs s1_1 on s1_1.id=s1_0.song_id where s1_0.playlist_id=?
2025-03-22 19:34:41 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:34:41 - select s1_0.playlist_id,s1_1.id,s1_1.artist,s1_1.title from playlist_songs s1_0 join songs s1_1 on s1_1.id=s1_0.song_id where s1_0.playlist_id=?
2025-03-22 19:34:41 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:35:03 - Вызов метода: PlaylistController.getPlaylistsWithSongs() с аргументами: []
2025-03-22 19:35:03 - Вызов метода: PlaylistService.getPlaylistsWithSongs() с аргументами: []
2025-03-22 19:35:03 - Вызов метода: PlaylistRepository.findPlaylistsWithSongs() с аргументами: []
2025-03-22 19:35:03 - SELECT p.*
FROM playlists p
JOIN playlist_songs ps ON p.id = ps.playlist_id
GROUP BY p.id
HAVING COUNT(ps.song_id) > 0

2025-03-22 19:35:03 - Метод PlaylistRepository.findPlaylistsWithSongs() успешно выполнен. Результат: [com.example.restservice.model.Playlist@33b6c9fe]
2025-03-22 19:35:03 - Метод PlaylistService.getPlaylistsWithSongs() успешно выполнен. Результат: [com.example.restservice.model.Playlist@33b6c9fe]
2025-03-22 19:35:03 - Метод PlaylistController.getPlaylistsWithSongs() успешно выполнен. Результат: [com.example.restservice.model.Playlist@33b6c9fe]
2025-03-22 19:35:03 - select s1_0.playlist_id,s1_1.id,s1_1.artist,s1_1.title from playlist_songs s1_0 join songs s1_1 on s1_1.id=s1_0.song_id where s1_0.playlist_id=?
2025-03-22 19:35:11 - Вызов метода: UserController.getUserById(..) с аргументами: [90]
2025-03-22 19:35:11 - Вызов метода: UserService.getUserById(..) с аргументами: [90]
2025-03-22 19:35:11 - Вызов метода: CrudRepository.findById(..) с аргументами: [90]
2025-03-22 19:35:11 - select u1_0.id,u1_0.username from users u1_0 where u1_0.id=?
2025-03-22 19:35:11 - Метод CrudRepository.findById(..) успешно выполнен. Результат: Optional.empty
2025-03-22 19:35:11 - Метод UserService.getUserById(..) успешно выполнен. Результат: null
2025-03-22 19:35:11 - Ошибка в методе: UserController.getUserById(..), ошбика {}
com.example.restservice.NotFoundException: Пользователь с id 90 не найден
	at com.example.restservice.controller.UserController.getUserById(UserController.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727)
	at com.example.restservice.controller.UserController$$SpringCGLIB$$0.getUserById(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-03-22 19:35:11 - Вызов метода: CustomExceptionHandlerAdvice.handleNotFoundException(..) с аргументами: [com.example.restservice.NotFoundException: Пользователь с id 90 не найден]
2025-03-22 19:35:11 - Метод CustomExceptionHandlerAdvice.handleNotFoundException(..) успешно выполнен. Результат: <404 NOT_FOUND Not Found,com.example.restservice.ErrorResponse@358fbdf8,[]>
2025-03-22 19:35:11 - Resolved [com.example.restservice.NotFoundException: Пользователь с id 90 не найден]
2025-03-22 19:35:15 - Вызов метода: UserController.getAllUsers() с аргументами: []
2025-03-22 19:35:15 - Вызов метода: UserService.getAllUsers() с аргументами: []
2025-03-22 19:35:15 - Вызов метода: ListCrudRepository.findAll() с аргументами: []
2025-03-22 19:35:15 - select u1_0.id,u1_0.username from users u1_0
2025-03-22 19:35:15 - Метод ListCrudRepository.findAll() успешно выполнен. Результат: [com.example.restservice.model.User@49ff2fb8, com.example.restservice.model.User@3e100b70, com.example.restservice.model.User@7785d36e, com.example.restservice.model.User@5c75caf9, com.example.restservice.model.User@7fc927fa, com.example.restservice.model.User@6f492f9f]
2025-03-22 19:35:15 - Метод UserService.getAllUsers() успешно выполнен. Результат: [com.example.restservice.model.User@49ff2fb8, com.example.restservice.model.User@3e100b70, com.example.restservice.model.User@7785d36e, com.example.restservice.model.User@5c75caf9, com.example.restservice.model.User@7fc927fa, com.example.restservice.model.User@6f492f9f]
2025-03-22 19:35:15 - Вызов метода: UserService.getAllUsers() с аргументами: []
2025-03-22 19:35:15 - Вызов метода: ListCrudRepository.findAll() с аргументами: []
2025-03-22 19:35:15 - select u1_0.id,u1_0.username from users u1_0
2025-03-22 19:35:15 - Метод ListCrudRepository.findAll() успешно выполнен. Результат: [com.example.restservice.model.User@49ff2fb8, com.example.restservice.model.User@3e100b70, com.example.restservice.model.User@7785d36e, com.example.restservice.model.User@5c75caf9, com.example.restservice.model.User@7fc927fa, com.example.restservice.model.User@6f492f9f]
2025-03-22 19:35:15 - Метод UserService.getAllUsers() успешно выполнен. Результат: [com.example.restservice.model.User@49ff2fb8, com.example.restservice.model.User@3e100b70, com.example.restservice.model.User@7785d36e, com.example.restservice.model.User@5c75caf9, com.example.restservice.model.User@7fc927fa, com.example.restservice.model.User@6f492f9f]
2025-03-22 19:35:15 - Метод UserController.getAllUsers() успешно выполнен. Результат: [com.example.restservice.model.User@49ff2fb8, com.example.restservice.model.User@3e100b70, com.example.restservice.model.User@7785d36e, com.example.restservice.model.User@5c75caf9, com.example.restservice.model.User@7fc927fa, com.example.restservice.model.User@6f492f9f]
2025-03-22 19:35:15 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:35:15 - select s1_0.playlist_id,s1_1.id,s1_1.artist,s1_1.title from playlist_songs s1_0 join songs s1_1 on s1_1.id=s1_0.song_id where s1_0.playlist_id=?
2025-03-22 19:35:15 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:35:15 - select s1_0.playlist_id,s1_1.id,s1_1.artist,s1_1.title from playlist_songs s1_0 join songs s1_1 on s1_1.id=s1_0.song_id where s1_0.playlist_id=?
2025-03-22 19:35:15 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:35:15 - select s1_0.playlist_id,s1_1.id,s1_1.artist,s1_1.title from playlist_songs s1_0 join songs s1_1 on s1_1.id=s1_0.song_id where s1_0.playlist_id=?
2025-03-22 19:35:15 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:35:15 - select s1_0.playlist_id,s1_1.id,s1_1.artist,s1_1.title from playlist_songs s1_0 join songs s1_1 on s1_1.id=s1_0.song_id where s1_0.playlist_id=?
2025-03-22 19:35:15 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:35:15 - select s1_0.playlist_id,s1_1.id,s1_1.artist,s1_1.title from playlist_songs s1_0 join songs s1_1 on s1_1.id=s1_0.song_id where s1_0.playlist_id=?
2025-03-22 19:35:15 - select p1_0.user_id,p1_0.id,p1_0.name from playlists p1_0 where p1_0.user_id=?
2025-03-22 19:37:48 - Вызов метода: LogController.getLogFile(..) с аргументами: [2025-03-22]
2025-03-22 19:37:48 - Метод LogController.getLogFile(..) успешно выполнен. Результат: <404 NOT_FOUND Not Found,[]>
2025-03-22 19:37:59 - Вызов метода: LogController.getLogFile(..) с аргументами: [2025-3-22]
2025-03-22 19:37:59 - Метод LogController.getLogFile(..) успешно выполнен. Результат: <404 NOT_FOUND Not Found,[]>
2025-03-22 19:41:30 - Вызов метода: LogController.getLogFile(..) с аргументами: [2025-03-22]
2025-03-22 19:41:30 - Метод LogController.getLogFile(..) успешно выполнен. Результат: <404 NOT_FOUND Not Found,[]>
2025-03-22 19:41:32 - Вызов метода: LogController.getLogFile(..) с аргументами: [2025-03-22]
2025-03-22 19:41:32 - Метод LogController.getLogFile(..) успешно выполнен. Результат: <404 NOT_FOUND Not Found,[]>
2025-03-22 19:42:35 - Commencing graceful shutdown. Waiting for active requests to complete
2025-03-22 19:42:35 - Graceful shutdown complete
2025-03-22 19:42:35 - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-03-22 19:42:35 - HikariPool-1 - Shutdown initiated...
2025-03-22 19:42:35 - HikariPool-1 - Shutdown completed.
2025-03-22 19:42:39 - Starting RestServiceApplication using Java 23.0.2 with PID 12720 (E:\RestService\target\classes started by Penumbra in E:\RestService)
2025-03-22 19:42:39 - No active profile set, falling back to 1 default profile: "default"
2025-03-22 19:42:39 - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-03-22 19:42:39 - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-03-22 19:42:40 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-03-22 19:42:40 - Finished Spring Data repository scanning in 59 ms. Found 3 JPA repository interfaces.
2025-03-22 19:42:41 - Tomcat initialized with port 8080 (http)
2025-03-22 19:42:41 - Initializing ProtocolHandler ["http-nio-8080"]
2025-03-22 19:42:41 - Starting service [Tomcat]
2025-03-22 19:42:41 - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-03-22 19:42:41 - Initializing Spring embedded WebApplicationContext
2025-03-22 19:42:41 - Root WebApplicationContext: initialization completed in 1883 ms
2025-03-22 19:42:42 - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-03-22 19:42:42 - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-03-22 19:42:42 - HHH000026: Second-level cache disabled
2025-03-22 19:42:42 - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-03-22 19:42:42 - HikariPool-1 - Starting...
2025-03-22 19:42:42 - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@178da01d
2025-03-22 19:42:42 - HikariPool-1 - Start completed.
2025-03-22 19:42:43 - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-03-22 19:42:43 - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-03-22 19:42:44 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-03-22 19:42:44 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-03-22 19:42:45 - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-03-22 19:42:46 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-03-22 19:42:46 - Failed to set up a Bean Validation provider: jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.
2025-03-22 19:42:47 - LiveReload server is running on port 35729
2025-03-22 19:42:47 - Starting ProtocolHandler ["http-nio-8080"]
2025-03-22 19:42:47 - Tomcat started on port 8080 (http) with context path '/'
2025-03-22 19:42:47 - Started RestServiceApplication in 8.478 seconds (process running for 10.319)
2025-03-22 19:44:02 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-03-22 19:44:02 - Initializing Servlet 'dispatcherServlet'
2025-03-22 19:44:02 - Completed initialization in 3 ms
2025-03-22 19:44:07 - Вызов метода: LogController.getLogFile(..) с аргументами: [2025-03-22]
2025-03-22 19:44:45 - Метод LogController.getLogFile(..) успешно выполнен. Результат: <404 NOT_FOUND Not Found,[]>
2025-03-22 19:50:12 - Commencing graceful shutdown. Waiting for active requests to complete
2025-03-22 19:50:12 - Graceful shutdown complete
2025-03-22 19:50:12 - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-03-22 19:50:12 - HikariPool-1 - Shutdown initiated...
2025-03-22 19:50:12 - HikariPool-1 - Shutdown completed.
2025-03-22 19:56:41 - Starting RestServiceApplication using Java 23.0.2 with PID 10576 (E:\RestService\target\classes started by Penumbra in E:\RestService)
2025-03-22 19:56:41 - No active profile set, falling back to 1 default profile: "default"
2025-03-22 19:56:41 - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-03-22 19:56:41 - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-03-22 19:56:42 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-03-22 19:56:42 - Finished Spring Data repository scanning in 51 ms. Found 3 JPA repository interfaces.
2025-03-22 19:56:42 - Tomcat initialized with port 8080 (http)
2025-03-22 19:56:42 - Initializing ProtocolHandler ["http-nio-8080"]
2025-03-22 19:56:42 - Starting service [Tomcat]
2025-03-22 19:56:42 - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-03-22 19:56:42 - Initializing Spring embedded WebApplicationContext
2025-03-22 19:56:42 - Root WebApplicationContext: initialization completed in 1757 ms
2025-03-22 19:56:43 - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-03-22 19:56:43 - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-03-22 19:56:43 - HHH000026: Second-level cache disabled
2025-03-22 19:56:43 - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-03-22 19:56:43 - HikariPool-1 - Starting...
2025-03-22 19:56:43 - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@22fb7f94
2025-03-22 19:56:43 - HikariPool-1 - Start completed.
2025-03-22 19:56:43 - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-03-22 19:56:43 - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-03-22 19:56:45 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-03-22 19:56:45 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-03-22 19:56:45 - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-03-22 19:56:46 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-03-22 19:56:46 - Failed to set up a Bean Validation provider: jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.
2025-03-22 19:56:47 - LiveReload server is running on port 35729
2025-03-22 19:56:47 - Starting ProtocolHandler ["http-nio-8080"]
2025-03-22 19:56:47 - Tomcat started on port 8080 (http) with context path '/'
2025-03-22 19:56:47 - Started RestServiceApplication in 7.18 seconds (process running for 7.973)
2025-03-22 19:57:01 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-03-22 19:57:01 - Initializing Servlet 'dispatcherServlet'
2025-03-22 19:57:02 - Completed initialization in 2 ms
2025-03-22 19:57:02 - Вызов метода: SongController.getAllSongs() с аргументами: []
2025-03-22 19:57:02 - Вызов метода: SongService.getAllSongs() с аргументами: []
2025-03-22 19:57:02 - Вызов метода: ListCrudRepository.findAll() с аргументами: []
2025-03-22 19:57:02 - select s1_0.id,s1_0.artist,s1_0.title from songs s1_0
2025-03-22 19:57:02 - Метод ListCrudRepository.findAll() успешно выполнен. Результат: [com.example.restservice.model.Song@6e1ff60e, com.example.restservice.model.Song@10de6d58, com.example.restservice.model.Song@33e1170b, com.example.restservice.model.Song@48735f23, com.example.restservice.model.Song@560bcf4c, com.example.restservice.model.Song@d6369ff, com.example.restservice.model.Song@26750328, com.example.restservice.model.Song@320da1ad, com.example.restservice.model.Song@74eb43c4, com.example.restservice.model.Song@375ddc48, com.example.restservice.model.Song@28214936, com.example.restservice.model.Song@97c5e31, com.example.restservice.model.Song@7be67a85, com.example.restservice.model.Song@1326d3a7, com.example.restservice.model.Song@65cd0345, com.example.restservice.model.Song@3cd5e186, com.example.restservice.model.Song@271fcfc8, com.example.restservice.model.Song@704d3955, com.example.restservice.model.Song@2a8463c4]
2025-03-22 19:57:02 - Метод SongService.getAllSongs() успешно выполнен. Результат: [com.example.restservice.model.Song@6e1ff60e, com.example.restservice.model.Song@10de6d58, com.example.restservice.model.Song@33e1170b, com.example.restservice.model.Song@48735f23, com.example.restservice.model.Song@560bcf4c, com.example.restservice.model.Song@d6369ff, com.example.restservice.model.Song@26750328, com.example.restservice.model.Song@320da1ad, com.example.restservice.model.Song@74eb43c4, com.example.restservice.model.Song@375ddc48, com.example.restservice.model.Song@28214936, com.example.restservice.model.Song@97c5e31, com.example.restservice.model.Song@7be67a85, com.example.restservice.model.Song@1326d3a7, com.example.restservice.model.Song@65cd0345, com.example.restservice.model.Song@3cd5e186, com.example.restservice.model.Song@271fcfc8, com.example.restservice.model.Song@704d3955, com.example.restservice.model.Song@2a8463c4]
2025-03-22 19:57:02 - Метод SongController.getAllSongs() успешно выполнен. Результат: [com.example.restservice.model.Song@6e1ff60e, com.example.restservice.model.Song@10de6d58, com.example.restservice.model.Song@33e1170b, com.example.restservice.model.Song@48735f23, com.example.restservice.model.Song@560bcf4c, com.example.restservice.model.Song@d6369ff, com.example.restservice.model.Song@26750328, com.example.restservice.model.Song@320da1ad, com.example.restservice.model.Song@74eb43c4, com.example.restservice.model.Song@375ddc48, com.example.restservice.model.Song@28214936, com.example.restservice.model.Song@97c5e31, com.example.restservice.model.Song@7be67a85, com.example.restservice.model.Song@1326d3a7, com.example.restservice.model.Song@65cd0345, com.example.restservice.model.Song@3cd5e186, com.example.restservice.model.Song@271fcfc8, com.example.restservice.model.Song@704d3955, com.example.restservice.model.Song@2a8463c4]
2025-03-22 19:57:22 - Вызов метода: LogController.getLogsByDate(..) с аргументами: [2025-03-22]
2025-03-22 19:57:22 - Метод LogController.getLogsByDate(..) успешно выполнен. Результат: <200 OK OK,URL [file:///C:/Users/Penumbra/AppData/Local/Temp/logs-2025-03-2213926490446607266379.log],[Content-Type:"text/plain", Content-Disposition:"attachment; filename="logs-2025-03-2213926490446607266379.log""]>
2025-03-22 19:57:32 - Commencing graceful shutdown. Waiting for active requests to complete
2025-03-22 19:57:32 - Graceful shutdown complete
2025-03-22 19:57:32 - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-03-22 19:57:32 - HikariPool-1 - Shutdown initiated...
2025-03-22 19:57:32 - HikariPool-1 - Shutdown completed.
